name: Bootstrap Terragrunt Config Repo

on:
  workflow_dispatch:
    inputs:
      landing_zone:
        description: "Landing zone (np. azure, gcp, aws)"
        type: string
        required: true
      environment:
        description: "Environment (dev|qa|stg|prd)"
        type: choice
        options: [dev, qa, stg, prd]
        required: true
      visibility:
        description: "Widoczność"
        type: choice
        options: [private, public]
        default: private

permissions:
  contents: read

env:
  ORG: damklys-lab
  CONFIG_TEMPLATE_REPO: terragrunt-lz-config-env   # Twój template

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Normalize inputs & compute names
        id: names
        run: |
          LZ="${{ github.event.inputs.landing_zone }}"
          ENV="${{ github.event.inputs.environment }}"
          VIS="${{ github.event.inputs.visibility }}"

          LZ=$(echo "$LZ" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g; s/--*/-/g; s/^-//; s/-$//')
          ENV=$(echo "$ENV" | tr '[:upper:]' '[:lower:]')

          REPO="terragrunt-${LZ}-config-${ENV}"

          echo "lz=$LZ" >> $GITHUB_OUTPUT
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "visibility=$VIS" >> $GITHUB_OUTPUT

      - name: Create repo from template (if missing)
        uses: actions/github-script@v7
        env:
          ORG_ADMIN_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
        with:
          github-token: ${{ env.ORG_ADMIN_TOKEN }}
          script: |
            const org = process.env.ORG;
            const template = process.env.CONFIG_TEMPLATE_REPO;
            const name = '${{ steps.names.outputs.repo }}';
            const visibility = '${{ steps.names.outputs.visibility }}';

            async function getRepo(owner, repo) {
              try { return (await github.rest.repos.get({ owner, repo })).data; }
              catch (e) { if (e.status === 404) return null; throw e; }
            }
            async function ensureTemplate(owner, repo) {
              const r = await getRepo(owner, repo);
              if (!r) throw new Error(`Template ${owner}/${repo} nie istnieje.`);
              if (!r.is_template) throw new Error(`Repo ${owner}/${repo} nie jest oznaczone jako Template repository.`);
            }
            await ensureTemplate(org, template);

            const exists = await getRepo(org, name);
            if (exists) {
              core.info(`✔️ ${org}/${name} już istnieje — pomijam tworzenie.`);
              return;
            }

            core.info(`➕ Tworzę ${org}/${name} z ${org}/${template}...`);
            await github.request('POST /repos/{template_owner}/{template_repo}/generate', {
              template_owner: org,
              template_repo: template,
              owner: org,
              name,
              private: visibility !== 'public',
              include_all_branches: false
            });
            core.info(`✅ Utworzono ${org}/${name}`);

      - name: Scaffold env folder & empty files
        uses: actions/github-script@v7
        env:
          ORG_ADMIN_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
        with:
          github-token: ${{ env.ORG_ADMIN_TOKEN }}
          script: |
            const org = process.env.ORG;
            const repo = '${{ steps.names.outputs.repo }}';
            const envName = '${{ steps.names.outputs.env }}';

            async function putFile(path, content, message) {
              const b64 = Buffer.from(content, 'utf8').toString('base64');
              let sha = undefined;
              try {
                const { data } = await github.rest.repos.getContent({ owner: org, repo, path });
                sha = Array.isArray(data) ? undefined : data.sha;
              } catch (e) {
                if (e.status !== 404) throw e;
              }
              await github.rest.repos.createOrUpdateFileContents({
                owner: org, repo, path, message, content: b64, sha
              });
            }

            // utwórz puste pliki
            await putFile(`${envName}/_region/.keep`, "", `chore(scaffold): add empty ${envName}/_region/.keep`);
            await putFile(`${envName}/global.hcl`, "", `chore(scaffold): add empty ${envName}/global.hcl`);

      - name: Summary
        run: |
          echo "Repo:       ${{ steps.names.outputs.repo }}"
          echo "Struktura:"
          echo "  ${{ steps.names.outputs.env }}/"
          echo "    _region/.keep (empty)"
          echo "    global.hcl (empty)"
